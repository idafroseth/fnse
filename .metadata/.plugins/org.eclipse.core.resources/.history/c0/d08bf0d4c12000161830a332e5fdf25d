package no.mil.fnse.southbound.dao;

import java.net.InetAddress;
import java.util.List;

import org.apache.log4j.Logger;

import com.cisco.onep.core.exception.OnepConnectionException;
import com.cisco.onep.core.exception.OnepException;
import com.cisco.onep.core.exception.OnepRemoteProcedureException;
import com.cisco.onep.core.util.OnepConstants;
import com.cisco.onep.element.NetworkApplication;
import com.cisco.onep.element.NetworkElement;
import com.cisco.onep.element.SessionConfig;
import com.cisco.onep.element.SessionHandle;
import com.cisco.onep.element.SessionConfig.SessionTransportMode;
import com.cisco.onep.idl.ExceptionIDL;
import com.cisco.onep.vty.VtyService;

import no.mil.fnse.configuration.DiscoveryConfiguration;
import no.mil.fnse.model.Peer;
import no.mil.fnse.service.DiscoveryServiceImpl;
import no.mil.fnse.southbound.model.BGPPeer;
import no.mil.fnse.southbound.model.Router;
import no.mil.fnse.southbound.model.TLSPinningHandler;

public class VtyRouterDAO implements RouterDAO {

	static Logger logger = Logger.getLogger(DiscoveryServiceImpl.class);
    
//	/**
//	 * Starting a connection monitor that will send a error message to the network manager if the connection is lost. 
//	 * This run in a separate thread to not interfere with the other operations. 
//	 */
//	private void startConnectionMonitor(){
//		Thread connMon = new ConnectionMonitor();
//		connMon.start();
//	}
//
//	/**
//	 * Runs in a separate thread and check if the connection to is up
//	 * @author Ida Marie Fr√∏seth
//	 *
//	 */
//	class ConnectionMonitor extends Thread{
//	   
//	    @Override
//		public void run() {
//			// TODO Auto-generated method stub
//			while(true){
//				try {
//					if(isConnected()){
//						logger.error("LOST CONNECTION WITH NETWORK ELEMENT!" );
//					}
//					Thread.sleep(1000*5);
//				} catch (InterruptedException e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//				}
//			}
//		}
//	}
	public void vtyClose(Router router){
		try{
			router.getVty().cancel();
			router.getVty().close();
			router.getVty().destroy();
		}catch(OnepException e){
			System.out.println("could not close vty");
			e.printStackTrace();
		}
	}

	@Override
	public boolean addNeighbor(Peer neighbor) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean deleteNeighbor(Peer neighbor) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public List<Peer> getAllConfiguredPeer() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<InetAddress> getIpMrouteSource(Router router, InetAddress remotePeer) {

		String interfaceName;
		try {
			if (!router.getVty().isOpen()) {
				router.vtyOpen();
			}
			interfaceName = router.getVty().write("show ip mroute " + remotePeer.toString() + " "
					+ DiscoveryConfiguration.DISCOVERY_CONFIG.getMULTICAST_GROUP() + " | include Incoming interface");
			logger.info("Trying to getIpMrouteSource: show ip mroute " + remotePeer.toString() + " "
					+ DiscoveryConfiguration.DISCOVERY_CONFIG.getMULTICAST_GROUP() + " | include Incoming interface");

			return networkElement.getInterfaceByName(interfaceName).getAddressList();
		} catch (InterruptedException | OnepException | ExceptionIDL e) {
			logger.error("Attached failed: " + e);
			return null;
		}
	 }

	@Override
	public List<BGPPeer> getBGPNeighbors() {
		// TODO Auto-generated method stub
		return null;
	}

}
