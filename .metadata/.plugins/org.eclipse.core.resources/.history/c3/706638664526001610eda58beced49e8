package no.mil.fnse.controller;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import no.mil.fnse.autoconfiguration.model.LocalConfiguration;
import no.mil.fnse.autoconfiguration.model.values.ConfigType;
import no.mil.fnse.autoconfiguration.service.AutoconfigurationService;
import no.mil.fnse.configuration.SystemWideConfiguration;
import no.mil.fnse.core.model.networkElement.GlobalConfiguration;
import no.mil.fnse.core.model.networkElement.TunnelInterface;

@RestController
public class AutoconfigurationController {
	
	@Autowired
	AutoconfigurationService defaultAutoconfService;

	static Logger logger = Logger.getLogger(AutoconfigurationController.class);
	/**
	 * To fetch the tunnel configuration.
	 * @return json
	 */
    @RequestMapping(method = RequestMethod.GET,value = "/api/configuration/local/{remote-ip}/{local-ip}")
    public String getLocalConfig() {
        return "Here you go, I will send you the configuration!";
    }
    
    /**
     * Returns the local configuration for a peer. Including the GRE tunnel interface, MSDP and BGP peering information. 
     * @param remoteIp
     * @param localIp
     * @return
     */
    @RequestMapping(method = RequestMethod.GET, value = "/api/configuration/local/{localIp}/{remoteIp}")
    public LocalConfiguration getLocalConfiguration(@PathVariable String remoteIp, @PathVariable String localIp) {
    	logger.info("Trying to access the global configuration of local: " + localIp);
        return defaultAutoconfService.getLocalConfiguration(localIp, remoteIp);
    }
    
    /**
     * Returns the local configuration for a peer. Including the GRE tunnel interface, MSDP and BGP peering information. 
     * @param remoteIp
     * @param localIp
     * @return
     */
    @RequestMapping(method = RequestMethod.GET, value = "/api/configuration/local/{localIp}/{remoteIp}/gre")
    public TunnelInterface getGreConfiguration(@PathVariable String remoteIp, @PathVariable String localIp) {
    	logger.info("Trying to access the global configuration of local: " + localIp);
        return defaultAutoconfService.getTunnelInterface(localIp, remoteIp);
    }
    
    @RequestMapping(method = RequestMethod.GET, value = "/api/configuration/local/{localIp}/{remoteIp}/gre")
    public TunnelInterface setGreConfiguration(@PathVariable String remoteIp, @PathVariable String localIp, @RequestBody TunnelInterface config ) {
    	logger.debug("Trying to configure the GRE tunnel interface address " + localIp);
        return defaultAutoconfService.setTunnelInterface(localIp, remoteIp, config).getGre();
    }
    
    /**
     * Returns the system wide configuration. Including the DNS, SIP, NTP,  
     * @return
     */
    @RequestMapping(method = RequestMethod.GET, value = "/api/configuration/global")
    public SystemWideConfiguration getGlobalConfiguration(@PathVariable String localIp) {
    	logger.info("Trying to access the global configuration of local: " + localIp);
        return defaultAutoconfService.getSystemWideConfiguration(localIp);
    }
    
    /**
     * Returns the system wide configuration. Including the DNS, SIP, NTP,  
     * @return 
     * @return
     */
    @RequestMapping(method = RequestMethod.GET, value = "/api/configuration/global/{configType}")
    public <E> Object getGlobalConfiguration(@PathVariable ConfigType configType) {
    	switch(configType){
    		case SIP:
    			return defaultAutoconfService.getSipConfig();
    			break;
    		case DNS:
    			return defaultAutoconfService.getDnsConfig();
    			break;
    		case NTP:
    			return defaultAutoconfService.getNtpConfig();
    			break;
    		default:
    			return null;
    			break;
    				
    	}
    }
    /**
     * Returns the system wide configuration. Including the DNS, SIP, NTP,  
     * @return 
     * @return
     */
    @RequestMapping(method = RequestMethod.POST, value = "/api/configuration/global/{configType}")
    public <E> Object getGlobalConfiguration(@PathVariable ConfigType configType, @RequestBody E configuration) {
    	switch(configType){
    		case SIP:
    			return defaultAutoconfService.updateSipConfig(configuration);
    			break;
    		case DNS:
    			return defaultAutoconfService.updateDnsConfig(configuration);
    			break;
    		case NTP:
    			return defaultAutoconfService.updateNtpConfig(configuration);
    			break;
    		default:
    			return null;
    			break;
    				
    	}
    }
    
}
