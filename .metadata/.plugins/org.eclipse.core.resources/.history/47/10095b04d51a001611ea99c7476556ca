package no.mil.fnse.configuration;



import java.beans.PropertyVetoException;
import java.util.Properties;

import org.apache.log4j.Logger;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.ComponentScan.Filter;
import org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor;
import org.springframework.orm.hibernate3.HibernateTransactionManager;
import org.springframework.orm.hibernate3.LocalSessionFactoryBean;
import org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean;

import no.mil.fnse.model.Controller;
import no.mil.fnse.model.DiscoveryConfig;
import no.mil.fnse.model.Peer;

import org.springframework.context.annotation.FilterType;
import org.springframework.context.annotation.Configuration;


//beans are typically the middle-tier and data-tier components that drive the back end of the application
@Configuration
@ComponentScan(basePackages={"no.mil.fnse"})
public class RootConfig {
	static Logger logger = Logger.getLogger(RootConfig.class);
	@Bean
	public AnnotationSessionFactoryBean sessionFactory(ComboPooledDataSource dataSource) {
		AnnotationSessionFactoryBean sessionFactory = new AnnotationSessionFactoryBean();
		sessionFactory.setDataSource(dataSource);
	//	 ((Object) sessionFactory).setPackagesToScan(new String[]{"no.cyfor.zelus.news_stand.dao.hibernate"});
		sessionFactory.setAnnotatedPackages(new String[] { "no.mil.fnse.model"});
		sessionFactory.setAnnotatedClasses(new Class[] {Controller.class, DiscoveryConfig.class, Peer.class});
		//sessionFactory.setMappingResources(;//, "model.KeyWord", "model.Search", "model.Publisher" });
		sessionFactory.setHibernateProperties(hibernateProperties());
		logger.info("SessionFatory: " + sessionFactory);
		return sessionFactory;
	}

	@Bean
	public ComboPooledDataSource dataSource() {
		ComboPooledDataSource dataSource = new ComboPooledDataSource();
		try {
			dataSource.setDriverClass("org.postgresql.Driver");
		} catch (PropertyVetoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		dataSource.setJdbcUrl("jdbc:postgresql:news_stand");
		dataSource.setUser("zelus");
		dataSource.setPassword("admin123");

		return dataSource;
	}

	@Bean(name = "transactionManager")
	@Autowired
	public HibernateTransactionManager transactionManager(SessionFactory sessionFactory) {
		HibernateTransactionManager txManager = new HibernateTransactionManager();
		txManager.setSessionFactory(sessionFactory);
		return txManager;
	}

	@Bean
	public PersistenceExceptionTranslationPostProcessor exceptionTranslation() {
		return new PersistenceExceptionTranslationPostProcessor();
	}

	private Properties hibernateProperties() {
		return new Properties() {
			{
				setProperty("hibernate.hbm2ddl.auto", "create-drop");
				setProperty("hibernate.dialect", "org.hibernate.dialect.PostgreSQLDialect");
				setProperty("hibernate.globally_quoted_identifiers", "true");
			}
		};
	}

}
