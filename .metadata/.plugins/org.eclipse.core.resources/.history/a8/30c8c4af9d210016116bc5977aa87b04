package no.mil.fnse.configuration;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.DatagramPacket;
import java.net.MulticastSocket;
import java.net.Socket;

import javax.net.SocketFactory;
import javax.net.ssl.SSLSocketFactory;

import org.apache.log4j.Logger;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;

import com.cisco.onep.core.exception.OnepException;
import com.cisco.onep.core.exception.OnepInvalidSettingsException;
import com.cisco.onep.element.NetworkApplication;
import com.cisco.onep.element.NetworkElement;
import com.cisco.onep.vty.VtyService;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;

import no.mil.fnse.southbound.model.RouterMixIn;
import no.mil.fnse.model.DiscoveryConfig;
import no.mil.fnse.service.DiscoveryServiceImpl;
import no.mil.fnse.southbound.model.Router;

@Configuration
@ComponentScan("no.mil.fnse")
public class DiscoveryConfiguration {

	static Logger logger = Logger.getLogger(DiscoveryConfiguration.class);

	public static DiscoveryConfig DISCOVERY_CONFIG = new DiscoveryConfig();
	public static String HELLO_MSG;
	public static MulticastSocket SERVER_SOCKET;
	public static MulticastSocket CLIENT_SOCKET;
	public static DatagramPacket HELLO_PACKET;

	private final int TTL = 10;

	private boolean hasRun = false;

	/**
	 * Read the config.json file and configuring the basic values as Hello
	 * interval,
	 */
	@Scheduled(fixedRate = 3600000)
	public void configure() {
		if (!hasRun) {
			ObjectMapper mapper = new ObjectMapper();
			try {
				DISCOVERY_CONFIG = mapper.readValue(new File(System.getProperty("user.dir") + "/config.json"),
						DiscoveryConfig.class);
				// Generate hello message from config
				HELLO_MSG = mapper.writeValueAsString(DISCOVERY_CONFIG.getNATIONAL_CONTROLLER());
				// Setup a socket to listen and send packages to/from
				// The server sender port in the HELLO_PACKET should be the same
				// as the listener
				CLIENT_SOCKET = new MulticastSocket(DISCOVERY_CONFIG.getPORT());
				SERVER_SOCKET = new MulticastSocket(0);
				SERVER_SOCKET.setTimeToLive(TTL);

				// Join group is only nessecary for the listener. Should be sent
				// regulary..
				CLIENT_SOCKET.joinGroup(DISCOVERY_CONFIG.getMULTICAST_GROUP());
				HELLO_PACKET = new DatagramPacket(HELLO_MSG.getBytes(), HELLO_MSG.getBytes().length,
						DISCOVERY_CONFIG.getMULTICAST_GROUP(), DISCOVERY_CONFIG.getPORT());

//				connectSSL();
//				connectToNetworkElements();
				simpleTelnet();

			} catch (IOException e) {
				logger.error("Attached failed: " + e);
			}
			hasRun = true;
		}

	}

	private void connectToNetworkElements() {
		for (Router router : DISCOVERY_CONFIG.getNetworkElements()) {
			try {
				router.setNetworkElement(getFNSENetworkApplication().getNetworkElement(router.getManagementIp()));
				router.connect();
				router.setVty(new VtyService(router.getNetworkElement()));
				logger.info("Successful connection to NetworkElement - " + router.getManagementIp());
			} catch (OnepException e) {
				logger.error(e.getMessage());
			}
		}

	}

	private NetworkApplication getFNSENetworkApplication() {
		NetworkApplication networkApplication = NetworkApplication.getInstance();
		try {
			networkApplication.setName("FNSE");
		} catch (OnepInvalidSettingsException e) {
			e.printStackTrace();
		}
		return networkApplication;

	}

	private void simpleTelnet(){
		Socket socket;
		try {
			socket = new Socket("47.0.0.1", 23);
	
			socket.setKeepAlive(true);
			PrintWriter out = new PrintWriter(
					  new BufferedWriter(
					  new OutputStreamWriter(
	     				  socket.getOutputStream())));

		    /* read response */
		    BufferedReader in = new BufferedReader(
					    new InputStreamReader(
					    socket.getInputStream()));

		    String inputLine;
		
		    out.println("cisco");
		    out.flush();
		    
		    out.println("cisco");
		    out.println();
		    out.flush();
			
		    out.println("show run int gi 0/1");
		    out.println();
		    out.flush();
		    /*
		     * Make sure there were no surprises
		     */
		    if (out.checkError())
			System.out.println(
			    "SSLSocketClient:  java.io.PrintWriter error");

		    
		    
		    while ((inputLine = in.readLine()) != null){
		    	System.out.println(inputLine);
		    }

		    System.out.println("Exiting the router");



		    in.close();
		    out.close();
		    socket.close();

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	private void connectSSL() {
		String host = "46.0.0.1";
		System.out.println("Connecting to host " + host);
		int port = 15002;
		SocketFactory basicSocketFactory = SocketFactory.getDefault();
		Socket s;
		try {
			s = basicSocketFactory.createSocket(host, port);

			// s is a TCP socket
			SSLSocketFactory tlsSocketFactory = (SSLSocketFactory) SSLSocketFactory.getDefault();
			s = tlsSocketFactory.createSocket(s, host, port, true);
			PrintWriter out = new PrintWriter(
					  new BufferedWriter(
					  new OutputStreamWriter(
	     				  s.getOutputStream())));

		    out.println("show run int gi 0/1");
		    out.println();
		    out.flush();

		    /*
		     * Make sure there were no surprises
		     */
		    if (out.checkError())
			System.out.println(
			    "SSLSocketClient:  java.io.PrintWriter error");

		    /* read response */
		    BufferedReader in = new BufferedReader(
					    new InputStreamReader(
					    s.getInputStream()));

		    String inputLine;
		    while ((inputLine = in.readLine()) != null)
			System.out.println(inputLine);

		    in.close();
		    out.close();
		    s.close();

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
}
