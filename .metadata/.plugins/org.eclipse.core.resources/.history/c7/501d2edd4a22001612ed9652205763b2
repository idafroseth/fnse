package no.mil.fnse.southbound.dao;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Component;

import no.mil.fnse.configuration.DiscoveryConfiguration;
import no.mil.fnse.model.Peer;
import no.mil.fnse.service.DiscoveryServiceImpl;
import no.mil.fnse.southbound.model.BGPPeer;
import no.mil.fnse.southbound.model.Router;

@Component("vtyRouterDAO")
public class VtyRouterDAO implements RouterDAO {

	static Logger logger = Logger.getLogger(DiscoveryServiceImpl.class);

	@Override
	public boolean addNeighbor(Peer neighbor) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean deleteNeighbor(Peer neighbor) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public List<Peer> getAllConfiguredPeer() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public InetAddress getIpMrouteSource(Router router, InetAddress remotePeer) {
		String response = router.getVty()
				.send("show ip mroute " + remotePeer.toString().substring(1) + " "
						+ DiscoveryConfiguration.DISCOVERY_CONFIG.getMULTICAST_GROUP().toString().substring(1)
						+ " | include Incoming interface");
		logger.info("Trying to getIpMrouteSource: show ip mroute " + remotePeer.toString().substring(1) + " "
				+ DiscoveryConfiguration.DISCOVERY_CONFIG.getMULTICAST_GROUP() + " | include Incoming interface");

		System.out.println("RESPONSE: " +response);
		if(!response.contains("Ethernet")){
			return null;
		}
		
		String[] words = response.split("\\s+");
		String ifName = words[2];
		
		System.out.println(ifName + " Is this the GI from " + response);
		if(!ifName.contains("Ethernet")){
			return null;
		}
		
		String[] result = router.getVty().send("show run interface " + ifName + " | include ip address").split("\\s+");
		try {
			return InetAddress.getByName(result[2]);
		} catch (UnknownHostException e) {
			logger.error("Attached failed " + e);
			return null;
		}
	}

	@Override
	public List<BGPPeer> getBGPNeighbors() {
		// TODO Auto-generated method stub
		return null;
	}
	
	/**
	 * Search for a searchString in a text and return the entire word. return null if the text does not contain the pattern.
	 * @param searchString
	 * @param text
	 * @return
	 */
	private String findWordWithPattern(String searchString, String text){
		String sPattern = "(?i)\\b\\w*" +searchString + "\\w*\\b";
	    Pattern pattern = Pattern.compile(sPattern);
	    Matcher matcher = pattern.matcher(text);
	    while(matcher.find()){
	    	return matcher.group();
	    }
	    return null;
	}

}
