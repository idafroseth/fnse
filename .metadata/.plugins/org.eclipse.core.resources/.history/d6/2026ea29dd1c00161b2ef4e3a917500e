package no.mil.fnse.service;


import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

import no.mil.fnse.model.Controller;
import no.mil.fnse.model.Peer;
import no.mil.fnse.model.values.PeerStatus;
import no.mil.fnse.repository.ControllerDAO;
import no.mil.fnse.repository.PeerDAO;

@Service
@Component("discoveryServiceImpl")
public class DiscoveryServiceImpl implements DiscoveryService {
	static Logger logger = Logger.getLogger(DiscoveryServiceImpl.class);

	@Autowired
	ControllerDAO hibernateControllerDAO;

	@Autowired
	PeerDAO hibernatePeerDAO;
	
	public DiscoveryServiceImpl(){
		
	}

	public void checkDeadPeer() {
		// TODO Auto-generated method stub
		/*
		 * Check database where current date time > timestamp and not marked as
		 * DEAD
		 * 
		 */

	}

	@Override
	public void discoverdNeighbor(Peer neighbor) {
		// TODO Auto-generated method stub
		// Vi må legge til Peer i controller

		/*
		 * 1) Sjekk om nabo eksiterer i databasen 1.1) Hvis nei - 1.1.1) sjekk
		 * om kontroller ligger i databasend 1.1.1.1) Hvis nei, legg til
		 * kontroller (som også relasjon til peer) 1.1.1.2) Hvis ja, oppdater
		 * kontroller med peer (forutsetter at peer er lagt inn) 1.1.2) Legg til
		 * nabo med riktig 1.2)Hvis Ja: 1.2.1) oppdater tidstempel og kontroller
		 */
		if (hibernatePeerDAO.getPeerByIp(neighbor.getLocalInterfaceIp(), neighbor.getRemoteInterfaceIp()) == null) {
			neighbor.setStatus(PeerStatus.DISCOVERED);
			addNeighbor(neighbor);
			logger.info("New peer discovered: " + neighbor.getLocalInterfaceIp() + ", " + neighbor.getRemoteInterfaceIp());
		} else {
			hibernatePeerDAO.updatePeer(neighbor);
		}

	}

	/**
	 * Add a remote neighbor by first checking if its controller exsist. If the
	 * controller doesn´t exsist it will first add the controller before it adds
	 * the peer.
	 */
	public void addNeighbor(Peer neighbor) {
		if (hibernateControllerDAO.getControllerByIp(neighbor.getController().getIpAddress()) == null) {
			hibernateControllerDAO.saveController(neighbor.getController());
		}
		neighbor.setController(hibernateControllerDAO.getControllerByIp(neighbor.getController().getIpAddress()));
		hibernatePeerDAO.savePeer(neighbor);
	}

}
